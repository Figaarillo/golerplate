basePath: /api
definitions:
  entity.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/entity.Product'
        type: array
      updated_at:
        type: string
    type: object
  entity.Client:
    properties:
      age:
        maximum: 120
        minimum: 0
        type: integer
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
      orders:
        items:
          $ref: '#/definitions/entity.Order'
        type: array
      updated_at:
        type: string
    required:
    - email
    - firstname
    - lastname
    type: object
  entity.Order:
    properties:
      client:
        $ref: '#/definitions/entity.Client'
      client_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      products:
        items:
          $ref: '#/definitions/entity.Product'
        type: array
      status:
        type: string
      total:
        type: number
      updated_at:
        type: string
    required:
    - client_id
    - status
    type: object
  entity.Product:
    properties:
      category:
        $ref: '#/definitions/entity.Category'
      category_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
      updated_at:
        type: string
    required:
    - category_id
    type: object
host: localhost:8080
info:
  contact:
    email: axel.leonardi.22@gmail.com
    name: Figarillo
  description: GOlerplate is boilerpalte for GO
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: golerplate API
  version: "1.0"
paths:
  /api/categories:
    get:
      consumes:
      - application/json
      description: Get a list of all categories with pagination
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Categories retrieved successfully
          schema:
            items:
              $ref: '#/definitions/entity.Category'
            type: array
      summary: List all categories with pagination
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided data
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Category created successfully
          schema:
            $ref: '#/definitions/entity.Category'
      summary: Create a new category
      tags:
      - categories
  /api/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing category using its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
      summary: Delete a category by ID
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Retrieve a category using its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category retrieved successfully
          schema:
            $ref: '#/definitions/entity.Category'
      summary: Get a category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Category updated successfully
          schema:
            $ref: '#/definitions/entity.Category'
      summary: Update a category by ID
      tags:
      - categories
  /api/clients:
    get:
      consumes:
      - application/json
      description: Get a list of all clients with pagination
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Clients retrieved successfully
          schema:
            items:
              $ref: '#/definitions/entity.Client'
            type: array
      summary: List all clients with pagination
      tags:
      - clients
    post:
      consumes:
      - application/json
      description: Create a new client with the provided data
      parameters:
      - description: Client
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/entity.Client'
      produces:
      - application/json
      responses:
        "201":
          description: Client created successfully
          schema:
            $ref: '#/definitions/entity.Client'
      summary: Create a client
      tags:
      - clients
  /api/clients/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing client using its ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Client deleted successfully
      summary: Delete a client by ID
      tags:
      - clients
    get:
      consumes:
      - application/json
      description: Retrieve a client using its ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Client retrieved successfully
          schema:
            $ref: '#/definitions/entity.Client'
      summary: Get a client by ID
      tags:
      - clients
    put:
      consumes:
      - application/json
      description: Update an existing client by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      - description: Client data
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/entity.Client'
      produces:
      - application/json
      responses:
        "200":
          description: Client updated successfully
          schema:
            $ref: '#/definitions/entity.Client'
      summary: Update a client
      tags:
      - clients
  /api/orders:
    get:
      consumes:
      - application/json
      description: Get a list of orders with pagination
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            items:
              $ref: '#/definitions/entity.Order'
            type: array
      summary: List orders with pagination
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order with the provided data
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/entity.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/entity.Order'
      summary: Create a new order
      tags:
      - orders
  /api/orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing order using its ID
      parameters:
      - description: order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order deleted successfully
      summary: Delete a order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Retrieve a order using its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/entity.Order'
      summary: Get a order by ID
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Set status of an order provided its ID
      parameters:
      - description: order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/entity.Order'
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            $ref: '#/definitions/entity.Order'
      summary: Set status
      tags:
      - orders
  /api/orders/client/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve orders using its client ID
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            items:
              $ref: '#/definitions/entity.Order'
            type: array
      summary: Get orders by client ID
      tags:
      - orders
  /api/products:
    get:
      consumes:
      - application/json
      description: Get a list of all products with pagination
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
      summary: List all products with pagination
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with provided data
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/entity.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            $ref: '#/definitions/entity.Product'
      summary: Create a new product
      tags:
      - products
  /api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing product using its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/entity.Product'
      summary: Delete a product by ID
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrive a product using its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            $ref: '#/definitions/entity.Product'
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/entity.Product'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            $ref: '#/definitions/entity.Product'
      summary: Update a product by ID
      tags:
      - products
swagger: "2.0"
